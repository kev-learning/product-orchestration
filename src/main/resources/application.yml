spring:
  application:
    name: product-orchestration-service
  cloud:
    stream:
      defaultBinder: kafka
      default.contentType: application/json
      bindings:
        products-out-0:
          destination: products
        recommendations-out-0:
          destination: recommendations
        reviews-out-0:
          destination: reviews
      kafka:
        enableDlq: true
        binder:
          brokers: 127.0.0.1
          defaultBrokerPort: 9092
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://${app.auth-server}:9999

springdoc:
  swagger-ui:
    path: /openapi/swagger-ui.html
    oauth2-redirect-url: /swagger-ui/oauth2-redirect.html
    oauth:
      clientId: writer
      clientSecret: secret-writer
      useBasicAuthenticationWithAccessCodeGrant: true
  oAuthFlow:
    authorizationUrl: https://localhost:8443/oauth2/authorize
    tokenUrl: https://localhost:8443/oauth2/token
  api-docs:
    path: /openapi/v3/api-docs
  pathsToMatch: /**
  packagesToScan: com.microservices.core.product.orchestration

api:
  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfService: MY TERMS OF SERVICE
    license: MY LICENSE
    licenseUrl: MY LICENSE URL
    externalDocDesc: MY WIKI PAGE
    externalDocUrl: MY WIKI URL
    contact:
      name: NAME OF CONTACT
      url: URL TO CONTACT
      email: contact@mail.com

server:
  port: 7000

logging:
  level:
    root: DEBUG
    com.microservices: DEBUG

app:
  service:
    product:
      host: localhost
      port: 7001
    review:
      host: localhost
      port: 7002
    recommendation:
      host: localhost
      port: 7003
  eureka-server: localhost
  auth-server: localhost




---
spring:
  config:
    activate:
      on-profile: docker
  kafka:
    bootstrap-servers: kafka:9092
  cloud:
    stream:
      kafka:
        binder:
          brokers: kafka
          defaultBrokerPort: 9092
          replication-factor: 1

server:
  port: 8080
  forward-headers-strategy: framework

app:
  eureka-server: eureka
  auth-server: auth-server

eureka:
  client:
    serviceUrl:
      defaultZone: http://${app.eureka-username}:${app.eureka-password}@${app.eureka-server}:8761/eureka/
    initialInstanceInfoReplicationIntervalSeconds: 5
    registryFetchIntervalSeconds: 5
  instance:
    leaseRenewalIntervalInSeconds: 5
    leaseExpirationDurationInSeconds: 5